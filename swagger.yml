openapi: 3.0.1
info:
  title: Restaurants Service API
  description: Restaurants from GoOutSafe with Microservices
  version: "0.1"
servers:
- url: /
paths:
  /restaurants:
    get:
      tags:
      - Restaurants
      summary: Get all restaurants
      operationId: app.get_restaurants
      responses:
        200:
          description: Return all restaurants
          content:
            application/json:
              schema:
                type: object
                properties:
                  restaurants:
                    type: array
                    items:
                      $ref: '#/components/schemas/Restaurant'
  /restaurants/{restaurant_id}:
    get:
      tags:
      - Restaurants
      summary: Get a single restaurant
      operationId: app.get_restaurant
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: Return restaurant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        404:
          description: Restaurant not found
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurants/{restaurant_id}/name:
    get:
      tags:
      - Restaurants
      summary: Get the name of the restaurant
      operationId: app.get_restaurant_name
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: Return restaurant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        404:
          description: Restaurant not found
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurants/{restaurant_id}/info:
    get:
      tags:
      - Restaurants
      summary: Get more info about the restaurant
      operationId: app.get_restaurant_more_info
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: Return restaurant
          content:
            application/json:
              schema:
                type: object
                properties:
                  Restaurant_info:
                    type: object
                    $ref: '#/components/schemas/Info'
        404:
          description: Restaurant not found
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurants/search/{name}:
    get:
      tags:
      - Restaurants
      summary: Get a restaurant restaurant with keyword name
      operationId: app.get_restaurants_by_keyword
      parameters:
      - name: name
        in: path
        description: name to search
        required: true
        schema:
          type: string
      responses:
        200:
          description: Return all restaurants with keyword name
          content:
            application/json:
              schema:
                type: object
                properties:
                  restaurants:
                    type: array
                    items:
                      $ref: '#/components/schemas/Restaurant'
  /restaurants/{restaurant_id}/menu:
    get:
      tags:
      - Menu
      summary: Get the menu of a single restaurant
      operationId: app.get_menus
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: Return the menus of the restaurant
          content:
            application/json:
              schema:
                type: object
                properties:
                  Menus:
                    type: array
                    items:
                      $ref: '#/components/schemas/Menus'
        404:
          description: Restaurant not found
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurants/menu/{menu_id}:
    post:
      tags:
      - Menu
      summary: Create a new photo for the menu
      operationId: app.create_menu_photo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhotoCreation"
      parameters:
      - name: menu_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: "Photo added"
        404:
          description: Error restaurant not found
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        409:
          description: Error URL already used
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurants/{restaurant_id}/dishes:
    get:
      tags:
      - Dishes
      summary: Get the dishes of a single restaurant
      operationId: app.get_dishes
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: Return the dishes of the restaurant
          content:
            application/json:
              schema:
                type: object
                properties:
                  Dishes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dishes'
        404:
          description: Restaurant not found
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
    post:
      tags:
      - Dishes
      summary: Create a new dish in the restaurant
      operationId: app.create_dish
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DishCreation"
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: "Dish added"
        404:
          description: Error restaurant not found
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurants/{restaurant_id}/openings:
    get:
      tags:
      - Opening Hours
      summary: Get the opening hours of a single restaurant
      operationId: app.get_openings
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: Return the opening hours of the restaurant
          content:
            application/json:
              schema:
                type: object
                properties:
                  Openings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Openings'
        404:
          description: Restaurant not found
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurants/{restaurant_id}/tables:
    get:
      tags:
      - Tables
      summary: Get the tables of a single restaurant
      operationId: app.get_tables
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: Return the tables of the restaurant
          content:
            application/json:
              schema:
                type: object
                properties:
                  Tables:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tables'
        404:
          description: Restaurant not found
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
    post:
      tags:
      - Tables
      summary: Create a table in the restaurant
      operationId: app.create_table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TableCreation"
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: "Table added to restaurant"
        404:
          description: Generic error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurants/{restaurant_id}/photos:
    get:
      tags:
      - Photos
      summary: Get the photos of a single restaurant
      operationId: app.get_photos
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: Return the photos of the restaurant
          content:
            application/json:
              schema:
                type: object
                properties:
                  Photos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Photos'
        404:
          description: Restaurant not found
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
    post:
      tags:
      - Photos
      summary: Create a new photo for the restaurant
      operationId: app.create_photo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhotoCreation"
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: "Photo added"
        404:
          description: Error restaurant not found
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        409:
          description: Error URL already used
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurants/{restaurant_id}/reviews:
    get:
      tags:
      - Reviews
      summary: Get the reviews of a single restaurant
      operationId: app.get_reviews
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: Return the reviews of the restaurant
          content:
            application/json:
              schema:
                type: object
                properties:
                  Reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reviews'
        404:
          description: Restaurant not found
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
    post:
      tags:
      - Reviews
      summary: Create a new review for the restaurant
      operationId: app.create_review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewCreation"
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: "Review added"
        404:
          description: Error restaurant not found
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurants/{restaurant_id}/reviews/{number}:
    get:
      tags:
      - Reviews
      summary: Get the a specified number of random reviews
      operationId: app.get_random_reviews
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      - name: number
        in: path
        description: number of reviews to get
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Return the random reviews of the restaurant
          content:
            application/json:
              schema:
                type: object
                properties:
                  Reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reviews'
        404:
          description: Restaurant not found
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurants/{restaurant_id}/avg_rating:
    get:
      tags:
      - Reviews
      summary: Get avg rating of a restaurant
      operationId: app.get_avg_rating_restaurant
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Return the avg reviews of the restaurant
          content:
            application/json:
              schema:
                type: number
        500:
          description: Generic error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurants/calculate_rating_for_all_restaurant:
      get:
        tags:
        - Reviews
        summary: Calculate rating for all restaurant (celery)
        operationId: app.calculate_rating_for_all_restaurant
        responses:
          200:
            description: "The operation is done"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Result'
          500:
            description: Generic error
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Error'
  /restaurants/create:
    post:
      tags:
      - Restaurants
      summary: Create a restaurant
      operationId: app.create_restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestaurantModel"
      responses:
        200:
          description: "Restaurant is been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantId"
        409:
          description: Generic error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurants/update:
    put:
      tags:
      - Restaurants
      summary: Update a restaurant
      operationId: app.update_restaurant_info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Restaurant"
      responses:
        200:
          description: "Restaurant is been updated"
        500:
          description: Generic error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /restaurant/menu/{dish_id}:
    delete:
      tags:
        - Dishes
      summary: Delete a dish
      operationId: app.delete_dish
      parameters:
        - in: path
          name: dish_id
          schema:
            type: integer
          required: true
          description: The dish_id ID
      responses:
        200:
          description: "The operation is done"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        400:
          description: "The code returned if there is some error on server, e.g: param not specified"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /restaurant/table/{table_id}:
    delete:
      tags:
        - Tables
      summary: Delete a table
      operationId: app.delete_table
      parameters:
        - in: path
          name: table_id
          schema:
            type: integer
          required: true
          description: The table_id ID
      responses:
        200:
          description: "The operation is done"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        400:
          description: "The code returned if there is some error on server, e.g: param not specified"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
components:
  schemas:
    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    Result:
      required:
        - result
      type: object
      properties:
        result:
          type: string
          default: Type of result
          example: "Message to describe what happen on server"
    Restaurant:
      required:
      - name
      - lat
      - lon
      - phone
      - covid_measures
      - avg_time
      - rating
      - owner_email
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: Restaurant's name
          example: "My Pizza Restaurant"
        lat:
          type: number
          description: Restaurant Latitude
          example: 42.42
        lon:
          type: number
          description: Restaurant Longitude
          example: 42.42
        phone:
          type: integer
          minLength: 5
          maxLength: 50
          description: Restaurant Phone Number
          example: 050123456
        covid_measures:
          type: string
          maxLength: 500
          description: Covid measures adopted in restaurant
          example: "Distance between tables"
        avg_time:
          type: integer
          description: Restaurant avg time
          example: 42
        rating:
          type: number
          description: Restaurant Rating
          example: 0
        owner_email:
          type: string
          description: Restaurant owner's email
          example: "mario.rossi@mail.it"
    RestaurantId:
      required:
        - id
        - name
        - lat
        - lon
        - phone
        - covid_measures
        - avg_time
        - rating
        - owner_email
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: Restaurant's name
          example: "My Pizza Restaurant"
        lat:
          type: number
          description: Restaurant Latitude
          example: 42.42
        lon:
          type: number
          description: Restaurant Longitude
          example: 42.42
        phone:
          type: integer
          minLength: 5
          maxLength: 50
          description: Restaurant Phone Number
          example: 050123456
        covid_measures:
          type: string
          maxLength: 500
          description: Covid measures adopted in restaurant
          example: "Distance between tables"
        avg_time:
          type: integer
          description: Restaurant avg time
          example: 42
        rating:
          type: number
          description: Restaurant Rating
          example: 0
        owner_email:
          type: string
          description: Restaurant owner's email
          example: "mario.rossi@mail.it"
    Menus:
      required:
      - description
      - cuisine
      - id
      - restaurant_id
      - photos
      type: object
      properties:
        description:
          maxLength: 100
          minLength: 1
          type: string
          description: Description of the menu
          example: "Typical plates"
        cuisine:
          type: string
          minLength: 5
          maxLength: 50
          description: cuisine type
          example: "Italian food"
        id:
          type: integer
          description: id of the menu
          example: 3
        restaurant_id:
          type: integer
          description: restaurant id
          example: 2
        photos:
          type: array
          items:
            $ref: '#/components/schemas/MenuPhotos'
    MenuPhotos: 
      required:
      - url
      - caption
      - id
      - menu_id
      type: object
      properties:
        url:
          maxLength: 255
          minLength: 1
          type: string
          description: URL of the photo
          example: "http://photo1.it"
        caption:
          type: string
          maxLength: 200
          minLength: 1
          description: Description
          example: "Photo 1"
        id:
          type: integer
          description: id of the photo
          example: 3
        menu_id:
          type: integer
          description: menu id
          example: 2
    Dishes: 
      required:
      - name
      - price
      - id
      - restaurant_id
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: Name of the dish
          example: "Pizza margherita"
        price:
          type: number
          description: Price of the plate
          example: 10.50
        id:
          type: integer
          description: id of the dish
          example: 3
        restaurant_id:
          type: integer
          description: restaurant id
          example: 2
    Openings: 
      required:
      - restaurant_id
      - week_day
      - open_lunch
      - close_lunch
      - open_dinner
      - close_dinner
      type: object
      properties:
        restaurant_id:
          type: integer
          description: restaurant id
          example: 2
        week_day:
          type: integer
          minimum: 0
          maximum: 6
          description: Day of week
          example: 3
        open_lunch:
          type: string
          format: date-time
          description: Time when the restaurant opens for lunch
          example: "11:30"
        close_lunch:
          type: string
          format: date-time
          description: Time when the restaurant closes for lunch
          example: "15:30"
        open_dinner:
          type: string
          format: date-time
          description: Time when the restaurant opens for dinner
          example: "19:00"
        close_dinner:
          type: string
          format: date-time
          description: Time when the restaurant closes for dinner
          example: "22:00"
    Tables: 
      required:
      - name
      - max_seats
      - available
      - id
      - restaurant_id
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: Name of the table
          example: "Table name"
        max_seats:
          type: integer
          description: Maximun number of people at the table
          example: 6
        available:
          type: boolean
          description: The availability of th table
          example: true
        id:
          type: integer
          description: id of the table
          example: 3
        restaurant_id:
          type: integer
          description: restaurant id
          example: 2
    Photos: 
      required:
      - url
      - caption
      - id
      - restaurant_id
      type: object
      properties:
        url:
          maxLength: 255
          minLength: 1
          type: string
          description: URL of the photo
          example: "http://photo.it"
        caption:
          type: string
          maxLength: 200
          minLength: 1
          description: Description
          example: "Restaurant!"
        id:
          type: integer
          description: id of the photo
          example: 3
        restaurant_id:
          type: integer
          description: restaurant id
          example: 2
    Reviews: 
      required:
      - stars
      - review
      - data
      - reviewer_email
      - id
      - restaurant_id
      type: object
      properties:
        stars:
          type: number
          minimum: 0
          maximum: 5
          description: Review of the restaurant
          example: 3.5
        review:
          type: string
          description: Review of the restaurant
          example: "Nice place!"
        data:
          type: string
          format: date-time
          description: when a user write a review for the restaurant
          example: "15/06/2020 14:00"
        reviewer_email:
          type: string
          description: Email of user who leave the review
          example: "nick.miller@email.com"
        id:
          type: integer
          description: id of the review
          example: 3
        restaurant_id:
          type: integer
          description: restaurant id
          example: 2
    RestaurantModel:
      required:
      - restaurant
      - restaurant_tables
      - menu
      - opening
      type: object
      properties:
        restaurant:
          $ref: '#/components/schemas/Restaurant'
        restaurant_tables:
          type: integer
          description: number of table for 6 people
          example: 10
        menu:
          type: array
          items:
            type: string
            maxLength: 100
            minLength: 1
            description: Cuisine type
            example: 'Italian food'
        opening:
          type: array
          items:
            $ref: '#/components/schemas/OpeningsInsert'
    OpeningsInsert:
      required:
      - week_day
      - open_lunch
      - close_lunch
      - open_dinner
      - close_dinner
      type: object
      properties:
        week_day:
          type: integer
          minimum: 0
          maximum: 6
          description: Day of week
          example: 3
        open_lunch:
          type: string
          format: date-time
          description: Time when the restaurant opens for lunch
          example: "11:30"
        close_lunch:
          type: string
          format: date-time
          description: Time when the restaurant closes for lunch
          example: "15:30"
        open_dinner:
          type: string
          format: date-time
          description: Time when the restaurant opens for dinner
          example: "19:00"
        close_dinner:
          type: string
          format: date-time
          description: Time when the restaurant closes for dinner
          example: "22:00"
    TableCreation:
      required:
      - max_seats
      - name
      type: object
      properties:
        max_seats:
          type: integer
          minimum: 0
          description: Max number of people at the table
          example: 3
        name:
          type: string
          maxLength: 100
          description: name of the table
          example: 'Red table'
    DishCreation:
      required:
      - name
      - price
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: name of the dish
          example: 'Pizza margherita'
        price:
          type: number
          minimum: 0
          description: price of the dish
          example: 10.50
    PhotoCreation:
      required:
      - caption
      - url
      type: object
      properties:
        caption:
          type: string
          maxLength: 200
          minLength: 0
          description: brief description of the photo
          example: 'Photo 1'
        url:
          type: string
          minLength: 0
          maxLength: 255
          description: url of the photo
          example: "http://photo1.safe"
    ReviewCreation: 
      required:
      - stars
      - review
      - reviewer_email
      type: object
      properties:
        stars:
          type: number
          description: Review of the restaurant
          example: 3.5
        review:
          type: string
          description: Review of the restaurant
          example: "Nice place!"
        reviewer_email:
          type: string
          description: Email of user who leave the review
          example: "nick.miller@email.com"
    Info: 
      required:
      - Restaurant
      - Menus
      - Photos
      - Dishes
      - Openings
      type: object
      properties:
        Restaurant:
          type: object
          $ref: '#/components/schemas/Restaurant'
        Menus:
          type: array
          items:
            $ref: '#/components/schemas/Menus'
        Photos:
          type: array
          items:
            $ref: '#/components/schemas/Photos'
        Dishes:
          type: array
          items:
            $ref: '#/components/schemas/Dishes'
        Openings:
          type: array
          items:
            $ref: '#/components/schemas/Openings'